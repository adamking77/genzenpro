---
interface Props {
  year: string;
  storyTitle: string;
  storyDescription: string;
  dataTitle: string;
  dataSubtitle?: string;
  dataGrid: string[][];
}

const { year, storyTitle, storyDescription, dataTitle, dataSubtitle, dataGrid } = Astro.props;
---

<section class="py-32 lg:py-48 bg-background text-foreground">
  <div class="max-w-7xl mx-auto px-6 lg:px-8">
    {/* Extended Story Section */}
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-20 lg:gap-32 mb-32">
      <div class="transition-all duration-1000 "" data-animate="data-story-left">
        <div class="space-y-10">
          <div class="text-xs font-normal text-foreground/40 tracking-widest uppercase mb-8">
            Since {year}
          </div>
          <h2 class="text-3xl md:text-4xl font-light leading-tight tracking-tight text-foreground">
            {storyTitle}
          </h2>
          
          
        </div>
      </div>
      
      <div class="space-y-12 transition-all duration-1000 delay-200 "" data-animate="data-story-right">
        <div class="space-y-8">
          <p class="text-lg font-light text-foreground/80 leading-relaxed">
            {storyDescription}
          </p>
        </div>
        
        
        <div class="w-12 h-px bg-foreground/30"></div>
      </div>
    </div>

    {/* Enhanced Data Grid Section */}
    <div class="transition-all duration-1000 delay-400 "" data-animate="data-grid">
      <div class="space-y-20">
        <div class="space-y-8">
          <h2 class="text-3xl md:text-4xl font-light leading-tight tracking-tight text-foreground">
            {dataTitle}
          </h2>
          {dataSubtitle && (
            <div class="space-y-4">
              <p class="text-lg font-light text-foreground/70 max-w-3xl leading-relaxed">
                {dataSubtitle}
              </p>
            </div>
          )}
          <div class="w-16 h-px bg-foreground/20"></div>
        </div>
        
        <div class="grid grid-cols-12 gap-px bg-foreground/10 rounded-lg overflow-hidden">
          {dataGrid.map((row, rowIndex) => (
            row.map((cell, cellIndex) => (
              <div 
                class="col-span-12 md:col-span-6 lg:col-span-3 bg-background p-8 hover:bg-foreground/5 transition-all duration-300 group"
              >
                <div class="space-y-3">
                  <div class="text-base font-light text-foreground group-hover:text-blue-500 transition-colors duration-300">
                    {cell}
                  </div>
                </div>
              </div>
            ))
          ))}
        </div>
        
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('astro:page-load', () => {
    const observerOptions = {
      threshold: 0.2,
      rootMargin: '0px'
    };

    // Observe elements with progressive delays
    const elementsWithDelays = [
      { selector: '[data-animate="data-story-left"]', delay: 0 },
      { selector: '[data-animate="data-story-right"]', delay: 200 },
      { selector: '[data-animate="data-grid"]', delay: 400 }
    ];

    elementsWithDelays.forEach(({ selector, delay }) => {
      const element = document.querySelector(selector);
      if (element) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const targetElement = entry.target as HTMLElement;
              setTimeout(() => {
                targetElement.classList.remove('opacity-0', 'translate-y-10');
                targetElement.classList.add('opacity-100', 'translate-y-0');
              }, delay);
            }
          });
        }, observerOptions);

        observer.observe(element);
      }
    });
  });
</script>
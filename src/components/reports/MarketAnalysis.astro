---
// Note: This component originally used 'recharts' for a LineChart and 'useScrollTrigger'.
// For this structural conversion, the chart is represented by a placeholder.
// Full implementation will require a client-side charting solution compatible with Astro.

// const data = [
//   { month: 'Jan', growth: 12, competition: 8 },
//   { month: 'Feb', growth: 19, competition: 12 },
//   { month: 'Mar', growth: 15, competition: 10 },
//   { month: 'Apr', growth: 25, competition: 15 },
//   { month: 'May', growth: 22, competition: 18 },
//   { month: 'Jun', growth: 30, competition: 20 },
// ]; // Removed as data is not used

// const isVisible = true; // Simulate visibility // Removed as isVisible is not used
// Removed animation-delay styles for this structural conversion.
---
<section class="py-32 lg:py-40">
  <div class="max-w-4xl mx-auto px-20 lg:px-24">
    <div class="grid lg:grid-cols-12 gap-16">
      <div class="lg:col-span-5 lg:col-start-8">
        <div class="space-y-8 opacity-0 translate-y-10 transition-all duration-1000" data-animate="market-content">
          <h2 class="text-4xl md:text-5xl font-light leading-tight tracking-tight text-foreground hover:scale-105 transition-transform duration-300">
            Market Analysis
          </h2>
          <div class="w-12 h-px bg-foreground/20 transition-all duration-1000 hover:w-24"></div>
          <div class="space-y-6">
            <p class="text-base font-light text-foreground leading-relaxed">
              Comprehensive market research reveals significant growth opportunities across key sectors, 
              with emerging trends indicating a 30% year-over-year expansion.
            </p>
            <div class="grid grid-cols-2 gap-6">
              <div class="group cursor-pointer hover:scale-110 transition-all duration-300"> {/* Removed animate-fade-in and style */}
                <div class="text-xl font-light mb-1 text-foreground group-hover:text-foreground/80 transition-colors duration-300">+24%</div>
                <div class="text-xs font-light text-foreground tracking-wider">MARKET GROWTH</div>
              </div>
              <div class="group cursor-pointer hover:scale-110 transition-all duration-300"> {/* Removed animate-fade-in and style */}
                <div class="text-xl font-light mb-1 text-foreground group-hover:text-foreground/80 transition-colors duration-300">87%</div>
                <div class="text-xs font-light text-foreground tracking-wider">CONFIDENCE</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="lg:col-span-6 lg:col-start-1 lg:row-start-1">
        <div class="h-80 w-full group cursor-pointer opacity-0 translate-y-10 transition-all duration-1000 delay-200" data-animate="market-chart">
          <div class="w-full h-full flex items-center justify-center border border-dashed border-foreground/20 rounded-lg">
            <p class="text-foreground/50 text-center">
              [Placeholder for Line Chart]<br/>
              (Originally implemented with Recharts)
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('astro:page-load', () => {
    const observerOptions = {
      threshold: 0.2,
      rootMargin: '0px'
    };

    // Observe elements with progressive delays
    const elementsWithDelays = [
      { selector: '[data-animate="market-content"]', delay: 0 },
      { selector: '[data-animate="market-chart"]', delay: 200 }
    ];

    elementsWithDelays.forEach(({ selector, delay }) => {
      const element = document.querySelector(selector);
      if (element) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const targetElement = entry.target as HTMLElement;
              setTimeout(() => {
                targetElement.classList.remove('opacity-0', 'translate-y-10');
                targetElement.classList.add('opacity-100', 'translate-y-0');
              }, delay);
            }
          });
        }, observerOptions);

        observer.observe(element);
      }
    });
  });
</script>